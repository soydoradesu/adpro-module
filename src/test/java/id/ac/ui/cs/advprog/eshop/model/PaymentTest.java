package id.ac.ui.cs.advprog.eshop.model;

import id.ac.ui.cs.advprog.eshop.enums.OrderStatus;
import id.ac.ui.cs.advprog.eshop.enums.PaymentMethod;
import id.ac.ui.cs.advprog.eshop.enums.PaymentStatus;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import static org.junit.jupiter.api.Assertions.*;

public class PaymentTest {

    private Map<String, String> voucherPayment = new HashMap<>();
    private Map<String, String> codPayment = new HashMap<>();
    private List<Product> products;
    private Order order;

    @BeforeEach
    void setUp() {
        voucherPayment.put("voucherCode", "ESHOP1234ABC5678");
        codPayment.put("address", "Kukusan");
        codPayment.put("deliveryFee", "20000");
        this.products = new ArrayList<>();
        Product product1 = new Product();
        product1.setProductId(UUID.fromString("eb558e9f-1c39-460e-8860-71af6af63bd6"));
        product1.setProductName("Sampo Cap Bambang");
        product1.setProductQuantity(2);

        Product product2 = new Product();
        product2.setProductId(UUID.fromString("a2c62328-4a37-4664-83c7-f32db8620155"));
        product2.setProductName("Sabun Cap Usep");
        product2.setProductQuantity(1);

        this.products.add(product1);
        this.products.add(product2);

        this.order = Order.builder()
                .id("787c1e14-8383-4308-b2d5-f924b9d588b8")
                .products(this.products)
                .orderTime(1708560000L)
                .author("lenpalen")
                .status(OrderStatus.WAITING_PAYMENT.getValue())
                .build();
    }

    @Test
    void testPaymentIdAutoGenerated() {
        Payment payment = new Payment("4f95549b-19d5-43d8-9267-6cc37c5ae0a8",
                PaymentMethod.COD.getValue(),
                PaymentStatus.WAITING.getValue(),
                codPayment,
                order);
        assertNotNull(payment.getPaymentId());
    }

    @Test
    void testPaymentMethodInvalid() {
        assertThrows(IllegalArgumentException.class, () -> {
            Payment payment = new Payment("4f95549b-19d5-43d8-9267-6cc37c5ae0a8",
                    "Invalid Payment Method",
                    PaymentStatus.WAITING.getValue(),
                    codPayment,
                    order);
        });
    }

    @Test
    void testPaymentMethodValid() {
        Payment payment = new Payment("4f95549b-19d5-43d8-9267-6cc37c5ae0a8",
                PaymentMethod.COD.getValue(),
                PaymentStatus.WAITING.getValue(),
                codPayment,
                order);
        assertEquals(
                PaymentMethod.COD.getValue(),
                payment.getPaymentMethod()
        );
    }

    @Test
    void testPaymentEmptyOrder() {
        this.order = null;
        assertThrows(IllegalArgumentException.class, () -> {
            Payment payment = new Payment("4f95549b-19d5-43d8-9267-6cc37c5ae0a8",
                    PaymentMethod.COD.getValue(),
                    PaymentStatus.WAITING.getValue(),
                    codPayment,
                    order);
        });
    }

    @Test
    void testPaymentOrder() {
        Payment payment = new Payment("4f95549b-19d5-43d8-9267-6cc37c5ae0a8",
                PaymentMethod.COD.getValue(),
                PaymentStatus.WAITING.getValue(),
                codPayment,
                order);
        assertEquals(
                PaymentMethod.COD.getValue(),
                payment.getPaymentMethod()
        );
    }

    @Test
    void testPaymentDataEmpty() {
        this.codPayment.clear();
        assertThrows(IllegalArgumentException.class, () -> {
            Payment payment = new Payment("4f95549b-19d5-43d8-9267-6cc37c5ae0a8",
                    PaymentMethod.COD.getValue(),
                    PaymentStatus.WAITING.getValue(),
                    codPayment,
                    order);
        });
    }

    @Test
    void testPaymentData() {
        Payment payment = new Payment("4f95549b-19d5-43d8-9267-6cc37c5ae0a8",
                PaymentMethod.COD.getValue(),
                PaymentStatus.WAITING.getValue(),
                codPayment,
                order);
        assertEquals(
                codPayment,
                payment.getPaymentData()
        );
    }

    @Test
    void testPaymentStatusSuccess() {
        Payment payment = new Payment("4f95549b-19d5-43d8-9267-6cc37c5ae0a8",
                PaymentMethod.COD.getValue(),
                PaymentStatus.WAITING.getValue(),
                codPayment,
                order);
        payment.setPaymentStatus(PaymentStatus.SUCCESS.getValue());
        assertEquals(
                PaymentStatus.SUCCESS.getValue(),
                payment.getPaymentStatus()
        );
    }

    @Test
    void testPaymentStatusRejected() {
        Payment payment = new Payment("4f95549b-19d5-43d8-9267-6cc37c5ae0a8", PaymentMethod.VOUCHER_CODE.getValue(),
                PaymentStatus.WAITING.getValue(), voucherPayment, order);
        payment.setPaymentStatus(PaymentStatus.REJECTED.getValue());
        assertEquals(PaymentStatus.REJECTED.getValue(), payment.getPaymentStatus());
    }

    @Test
    void testPaymentStatusVoucherCodeValid() {
        Payment payment = new Payment("4f95549b-19d5-43d8-9267-6cc37c5ae0a8", PaymentMethod.VOUCHER_CODE.getValue(),
                PaymentStatus.WAITING.getValue(), voucherPayment, order);
        assertEquals(PaymentStatus.WAITING.getValue(), payment.getPaymentStatus());
    }

    @Test
    void testPaymentStatusVoucherCodeInvalid() {
        voucherPayment.put("voucherCode", "ESHOP1234ABC567X");
        Payment payment = new Payment("4f95549b-19d5-43d8-9267-6cc37c5ae0a8", PaymentMethod.VOUCHER_CODE.getValue(),
                PaymentStatus.WAITING.getValue(), voucherPayment, order);
        assertEquals(PaymentStatus.REJECTED.getValue(), payment.getPaymentStatus());
    }

    @Test
    void testPaymentStatusCODValid() {
        Payment payment = new Payment("4f95549b-19d5-43d8-9267-6cc37c5ae0a8",
                PaymentMethod.COD.getValue(),
                PaymentStatus.WAITING.getValue(),
                codPayment,
                order);
        assertEquals(
                PaymentStatus.WAITING.getValue(),
                payment.getPaymentStatus()
        );
    }

    @Test
    void testPaymentStatusCODInvalid() {
        codPayment.put("address", null);
        codPayment.put("deliveryFee", null);
        Payment payment = new Payment("4f95549b-19d5-43d8-9267-6cc37c5ae0a8",
                PaymentMethod.COD.getValue(),
                PaymentStatus.WAITING.getValue(),
                codPayment,
                order);
        assertEquals(
                PaymentStatus.REJECTED.getValue(),
                payment.getPaymentStatus()
        );
    }
}
